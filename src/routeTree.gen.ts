/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardSettingsImport } from './routes/dashboard/settings'
import { Route as DashboardIntroImport } from './routes/dashboard/intro'
import { Route as DashboardHistoryImport } from './routes/dashboard/history'
import { Route as DashboardGetStartedImport } from './routes/dashboard/get-started'
import { Route as DashboardGeneralImport } from './routes/dashboard/general'
import { Route as DashboardExplorerImport } from './routes/dashboard/explorer'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardIntroRoute = DashboardIntroImport.update({
  id: '/intro',
  path: '/intro',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardHistoryRoute = DashboardHistoryImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardGetStartedRoute = DashboardGetStartedImport.update({
  id: '/get-started',
  path: '/get-started',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardGeneralRoute = DashboardGeneralImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardExplorerRoute = DashboardExplorerImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => DashboardRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/dashboard/explorer': {
      id: '/dashboard/explorer'
      path: '/explorer'
      fullPath: '/dashboard/explorer'
      preLoaderRoute: typeof DashboardExplorerImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/general': {
      id: '/dashboard/general'
      path: '/general'
      fullPath: '/dashboard/general'
      preLoaderRoute: typeof DashboardGeneralImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/get-started': {
      id: '/dashboard/get-started'
      path: '/get-started'
      fullPath: '/dashboard/get-started'
      preLoaderRoute: typeof DashboardGetStartedImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/history': {
      id: '/dashboard/history'
      path: '/history'
      fullPath: '/dashboard/history'
      preLoaderRoute: typeof DashboardHistoryImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/intro': {
      id: '/dashboard/intro'
      path: '/intro'
      fullPath: '/dashboard/intro'
      preLoaderRoute: typeof DashboardIntroImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DashboardRouteChildren {
  DashboardExplorerRoute: typeof DashboardExplorerRoute
  DashboardGeneralRoute: typeof DashboardGeneralRoute
  DashboardGetStartedRoute: typeof DashboardGetStartedRoute
  DashboardHistoryRoute: typeof DashboardHistoryRoute
  DashboardIntroRoute: typeof DashboardIntroRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardExplorerRoute: DashboardExplorerRoute,
  DashboardGeneralRoute: DashboardGeneralRoute,
  DashboardGetStartedRoute: DashboardGetStartedRoute,
  DashboardHistoryRoute: DashboardHistoryRoute,
  DashboardIntroRoute: DashboardIntroRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/explorer': typeof DashboardExplorerRoute
  '/dashboard/general': typeof DashboardGeneralRoute
  '/dashboard/get-started': typeof DashboardGetStartedRoute
  '/dashboard/history': typeof DashboardHistoryRoute
  '/dashboard/intro': typeof DashboardIntroRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/explorer': typeof DashboardExplorerRoute
  '/dashboard/general': typeof DashboardGeneralRoute
  '/dashboard/get-started': typeof DashboardGetStartedRoute
  '/dashboard/history': typeof DashboardHistoryRoute
  '/dashboard/intro': typeof DashboardIntroRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/explorer': typeof DashboardExplorerRoute
  '/dashboard/general': typeof DashboardGeneralRoute
  '/dashboard/get-started': typeof DashboardGetStartedRoute
  '/dashboard/history': typeof DashboardHistoryRoute
  '/dashboard/intro': typeof DashboardIntroRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/auth/login'
    | '/dashboard/explorer'
    | '/dashboard/general'
    | '/dashboard/get-started'
    | '/dashboard/history'
    | '/dashboard/intro'
    | '/dashboard/settings'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/auth/login'
    | '/dashboard/explorer'
    | '/dashboard/general'
    | '/dashboard/get-started'
    | '/dashboard/history'
    | '/dashboard/intro'
    | '/dashboard/settings'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/dashboard'
    | '/auth/login'
    | '/dashboard/explorer'
    | '/dashboard/general'
    | '/dashboard/get-started'
    | '/dashboard/history'
    | '/dashboard/intro'
    | '/dashboard/settings'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/login"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/explorer",
        "/dashboard/general",
        "/dashboard/get-started",
        "/dashboard/history",
        "/dashboard/intro",
        "/dashboard/settings",
        "/dashboard/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/dashboard/explorer": {
      "filePath": "dashboard/explorer.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/general": {
      "filePath": "dashboard/general.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/get-started": {
      "filePath": "dashboard/get-started.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/history": {
      "filePath": "dashboard/history.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/intro": {
      "filePath": "dashboard/intro.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings": {
      "filePath": "dashboard/settings.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
